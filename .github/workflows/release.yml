name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: lm
            binary_suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: lm
            binary_suffix: '.exe'
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: lm
            binary_suffix: ''
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Debug environment (macOS only)
      if: runner.os == 'macOS'
      run: |
        echo "PATH: $PATH"
        echo "Home: $HOME"
        which cargo || echo "cargo not found"
        which rustc || echo "rustc not found"
        ls -la ~/.cargo/bin/ || echo "~/.cargo/bin/ not found"
      
    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Verify Rust installation
      run: |
        rustc --version
        cargo --version
        
    - name: Add cargo to PATH (macOS)
      if: runner.os == 'macOS'
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Copy binary
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "${{ runner.os }}" = "Windows" ]; then
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }}.exe artifacts/lm-${{ matrix.target }}${{ matrix.binary_suffix }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} artifacts/lm-${{ matrix.target }}${{ matrix.binary_suffix }}
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: lm-${{ matrix.target }}
        path: artifacts/lm-${{ matrix.target }}${{ matrix.binary_suffix }}

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Rename binaries
      run: |
        mv artifacts/lm-x86_64-unknown-linux-gnu/lm-x86_64-unknown-linux-gnu artifacts/lm-linux-x86_64
        mv artifacts/lm-x86_64-pc-windows-msvc/lm-x86_64-pc-windows-msvc.exe artifacts/lm-windows-x86_64.exe
        mv artifacts/lm-x86_64-apple-darwin/lm-x86_64-apple-darwin artifacts/lm-macos-x86_64
        
    - name: Create GitHub release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/lm-linux-x86_64
          artifacts/lm-windows-x86_64.exe
          artifacts/lm-macos-x86_64
        generate_release_notes: true
        
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish