name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: lm
            binary_suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: lm
            binary_suffix: '.exe'
          - os: macos-13
            target: x86_64-apple-darwin
            binary_name: lm
            binary_suffix: ''
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Copy binary
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "${{ runner.os }}" = "Windows" ]; then
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }}.exe artifacts/lm-${{ matrix.target }}${{ matrix.binary_suffix }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} artifacts/lm-${{ matrix.target }}${{ matrix.binary_suffix }}
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: lm-${{ matrix.target }}
        path: artifacts/lm-${{ matrix.target }}${{ matrix.binary_suffix }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        
    - name: Upload Linux binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/lm-x86_64-unknown-linux-gnu/lm-x86_64-unknown-linux-gnu
        asset_name: lm-linux-x86_64
        asset_content_type: application/octet-stream
        
    - name: Upload Windows binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/lm-x86_64-pc-windows-msvc/lm-x86_64-pc-windows-msvc.exe
        asset_name: lm-windows-x86_64.exe
        asset_content_type: application/octet-stream
        
    - name: Upload macOS binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/lm-x86_64-apple-darwin/lm-x86_64-apple-darwin
        asset_name: lm-macos-x86_64
        asset_content_type: application/octet-stream
        
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish